${
  jsonencode(
    {
    "description": "Messaging Flow - Lex",
    "states": [
        {
        "name": "Trigger",
        "type": "trigger",
        "transitions": [
            {
            "next": "pre_survey_complete",
            "event": "incomingMessage"
            },
            {
            "event": "incomingCall"
            },
            {
            "event": "incomingConversationMessage"
            },
            {
            "event": "incomingRequest"
            },
            {
            "event": "incomingParent"
            }
        ],
        "properties": {
            "offset": {
            "x": 160,
            "y": -90
            }
        }
        },
        {
        "name": "attributes",
        "type": "send-to-flex",
        "transitions": [
            {
            "event": "callComplete"
            },
            {
            "event": "failedToEnqueue"
            },
            {
            "event": "callFailure"
            }
        ],
        "properties": {
            "offset": {
            "x": 320,
            "y": 510
            },
            "workflow": workflow_sids["master"],
            "channel": task_channel_sids["chat"],
            "attributes":channel_attributes["default"]
        }
        },
        {
        "name": "pre_survey_complete",
        "type": "split-based-on",
        "transitions": [
            {
            "next": "capture_channel_with_bot",
            "event": "noMatch"
            },
            {
            "next": "attributes",
            "event": "match",
            "conditions": [
                {
                "friendly_name": "If value equal_to true",
                "arguments": [
                    "{{trigger.message.ChannelAttributes.preSurveyComplete}}"
                ],
                "type": "equal_to",
                "value": "true"
                }
            ]
            }
        ],
        "properties": {
            "input": "{{trigger.message.ChannelAttributes.preSurveyComplete}}",
            "offset": {
            "x": 150,
            "y": 200
            }
        }
        },
        {
        "name": "capture_channel_with_bot",
        "type": "run-function",
        "transitions": [
            {
            "event": "success"
            },
            {
            "event": "fail"
            }
        ],
        "properties": {
            "service_sid": flow_vars["service_sid"],
            "environment_sid": flow_vars["environment_sid"],
            "offset": {
            "x": -140,
            "y": 520
            },
            "function_sid": flow_vars["capture_channel_with_bot_function_sid"],
            "parameters": [
            {
                "value": "{{flow.channel.address}}",
                "key": "channelSid"
            },
            {
                "value": "{{trigger.message.Body}}",
                "key": "message"
            },
            {
                "value": "{{flow.flow_sid}}",
                "key": "studioFlowSid"
            },
            {
                "value": flow_vars["bot_language"],
                "key": "language"
            },
            {
                "value": "pre_survey",
                "key": "botSuffix"
            },
            {
                "value": "withUserMessage",
                "key": "triggerType"
            },
            {
                "value": "triggerStudioFlow",
                "key": "releaseType"
            },
            {
                "value": "preSurveyComplete",
                "key": "releaseFlag"
            },
            {
                "value": "{{trigger.message.ChannelAttributes.channel_type | downcase}}",
                "key": "channelType"
            },
            {
                "value": "false",
                "key": "isConversation"
            }
            ],
            "url": "${serverless_url}/${flow_vars["capture_channel_with_bot_function_name"]}"
        }
        }
    ],
    "initial_state": "Trigger",
    "flags": {
        "allow_concurrent_calls": true
    }
    }

  )
}