${
  jsonencode({
  "description": "${flow_description}",
  "states": [
    {
      "name": "Trigger",
      "type": "trigger",
      "transitions": [
        {
          "event": "incomingMessage"
        },
        {
          "next": "run_subflow_system_down",
          "event": "incomingCall"
        },
        {
          "event": "incomingConversationMessage"
        },
        {
          "event": "incomingRequest"
        },
        {
          "event": "incomingParent"
        }
      ],
      "properties": {
        "offset": {
          "x": 0,
          "y": -10
        }
      }
    },
    {
      "name": "attributes",
      "type": "send-to-flex",
      "transitions": [
        {
          "event": "callComplete"
        },
        {
          "event": "failedToEnqueue"
        },
        {
          "event": "callFailure"
        }
      ],
      "properties": {
        "waitUrl": "${channel_flow_vars.wait_url}",
        "offset": {
          "x": 890,
          "y": 1480
        },
        "attributes": "${channel_attributes.default}",
        "workflow": "${workflow_sids.master_calls}",
        "channel": "${task_channel_sids.voice}",
        "waitUrlMethod": "GET",
        "timeout": "3600"
      }
    },
    {
      "name": "getProfileFlagsForIdentifier",
      "type": "make-http-request",
      "transitions": [
        {
          "next": "contact_routing",
          "event": "success"
        },
        {
          "next": "play_initial_message",
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 700,
          "y": 500
        },
        "method": "POST",
        "add_twilio_auth": false,
        "content_type": "application/json;charset=utf-8",
        "body": "{ \"trigger\": {{trigger | to_json}}, \"channelType\": \"${channel_name}\" }",
        "url": "${get_profile_flags_for_identifier_base_url}/getProfileFlagsForIdentifier"
      }
    },
    {
      "name": "contact_routing",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "play_initial_message",
          "event": "noMatch"
        },
        {
          "next": "play_blocked",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value contains blocked",
              "arguments": [
                "{{widgets.getProfileFlagsForIdentifier.parsed.flags}}"
              ],
              "type": "contains",
              "value": "blocked"
            }
          ]
        },
        {
          "next": "set_clinical",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value contains case management",
              "arguments": [
                "{{widgets.getProfileFlagsForIdentifier.parsed.flags}}"
              ],
              "type": "contains",
              "value": "case management"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.getProfileFlagsForIdentifier.parsed.flags}}",
        "offset": {
          "x": 470,
          "y": 720
        }
      }
    },
    {
      "name": "set_clinical",
      "type": "set-variables",
      "transitions": [
        {
          "next": "play_initial_message",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "true",
            "key": "clinical",
            "type": "string"
          }
        ],
        "offset": {
          "x": 990,
          "y": 980
        }
      }
    },
    {
      "name": "play_blocked",
      "type": "say-play",
      "transitions": [
        {
          "event": "audioComplete"
        }
      ],
      "properties": {
        "play": "${channel_flow_vars.blocked_url}",
        "offset": {
          "x": 1320,
          "y": 980
        },
        "loop": 1
      }
    },
    {
      "name": "play_initial_message",
      "type": "say-play",
      "transitions": [
        {
          "next": "attributes",
          "event": "audioComplete"
        }
      ],
      "properties": {
        "play": "${channel_flow_vars.initial_message_url}",
        "offset": {
          "x": 770,
          "y": 1190
        },
        "loop": 1
      }
    },
    {
      "name": "need_bypass",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "country_check",
          "event": "noMatch"
        },
        {
          "next": "attributesNoTimeout",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of ${join(",", formatlist("'%s'", phone_numbers.clinical))}",
              "arguments": [
                "{{trigger.call.To}}"
              ],
              "type": "matches_any_of",
              "value": "${join(",", formatlist("'%s'", phone_numbers.clinical))}"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{trigger.call.To}}",
        "offset": {
          "x": 100,
          "y": 230
        }
      }
    },
    {
      "name": "attributesNoTimeout",
      "type": "send-to-flex",
      "transitions": [
        {
          "event": "callComplete"
        },
        {
          "event": "failedToEnqueue"
        },
        {
          "event": "callFailure"
        }
      ],
      "properties": {
        "waitUrl": "",
        "offset": {
          "x": 80,
          "y": 630
        },
        "attributes": "${channel_attributes.default}",
        "workflow": "${workflow_sids.master_calls}",
        "channel": "${task_channel_sids.voice}",
        "waitUrlMethod": "GET",
        "timeout": "3600"
      }
    },
    {
      "name": "country_check",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "play_blocked",
          "event": "noMatch"
        },
        {
          "next": "getProfileFlagsForIdentifier",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value regex ${channel_flow_vars.regex_allowed_test_numbers}",
              "arguments": [
                "{{trigger.call.From}}"
              ],
              "type": "regex",
              "value": "${channel_flow_vars.regex_allowed_test_numbers}"
            }
          ]
        },
        {
          "next": "getProfileFlagsForIdentifier",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value starts_with +64",
              "arguments": [
                "{{trigger.call.From}}"
              ],
              "type": "starts_with",
              "value": "+64"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{trigger.call.From}}",
        "offset": {
          "x": 1030,
          "y": 270
        }
      }
    },
     {
      "name": "run_subflow_system_down",
      "type": "run-subflow",
      "transitions": [
        {
          "next": "need_bypass",
          "event": "completed"
        },
        {
          "next": "need_bypass",
          "event": "failed"
        }
      ],
      "properties": {
        "flow_sid": "${system_down_studio_subflow_sid}",
        "flow_revision": "LatestPublished",
        "offset": {
          "x": 110,
          "y": -270
        },
        "parameters": [
          {
            "type": "string",
            "value": "true",
            "key": "system_down"
          }
        ]
      }
    }
  ],
  "initial_state": "Trigger",
  "flags": {
    "allow_concurrent_calls": true
  }
})
}
