# Copyright (C) 2021-2023 Technology Matters
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

# Publish a Twilio Flex-plugins with Github Actions
name: Flex Deploy

on:
  workflow_dispatch:
    inputs:
      helpline_code:
        description: The short (usually 2 character) upper case code used to identify the helpline internally, e.g. ZA, IN, BR.
        required: true
        type: string
      environment_code:
        description: Flex-plugins environment to deploy
        required: true
        type: choice
        options:
          - development
          - staging
          - production
  workflow_call:
    inputs:
      helpline_code:
        description: The short (usually 2 character) upper case code used to identify the helpline internally, e.g. ZA, IN, BR.
        required: true
        type: string
      environment_code:
        description: Flex-plugins environment to deploy
        required: true
        type: string
      send-slack-message:
        description: If set to false a slack message will not be sent - useful for E2E test deploys.
        default: 'true'
        type: string
      invalidate-cache:
        description: 'Specifies if should invalidate CloudFront cache for form data. Defaults to true, set to false if the caller will handle cache invalidation.'
        required: false
        default: 'true'
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            .github/actions
            plugin-hrm-form/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Set ENVIRONMENT_NAME
      - name: Set Helpline Environment
        run: echo "ENVIRONMENT_NAME=${{inputs.environment_code}}" >> $GITHUB_ENV

      - name: Set Twilio account SID
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/${{env.ENVIRONMENT_NAME}}/twilio/${{inputs.helpline_code}}/account_sid"
          env_variable_name: "TWILIO_ACCOUNT_SID"

      - name: Set Twilio Auth Token
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/${{env.ENVIRONMENT_NAME}}/twilio/${{env.TWILIO_ACCOUNT_SID}}/auth_token"
          env_variable_name: "TWILIO_AUTH_TOKEN"

      # Set any env vars needed from Parameter Store here
      # Slack env
      - name: Set GITHUB_ACTIONS_SLACK_BOT_TOKEN
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
          env_variable_name: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
      - name: Set ASELO_DEPLOYS_CHANNEL_ID
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "ASELO_DEPLOYS_CHANNEL_ID"
          env_variable_name: "ASELO_DEPLOYS_CHANNEL_ID"

      # Point the account at the s3 hosted plugin
      - name: Configure Account to point to S3 Hosted Plugin
        shell: bash
        run: |
          curl --location 'https://flex-api.twilio.com/v1/Configuration' \
          --header 'Content-Type: application/json' \
          -u '${{env.TWILIO_ACCOUNT_SID}}:${{env.TWILIO_AUTH_TOKEN}}' \
          --data "{
              \"account_sid\": \"${{env.TWILIO_ACCOUNT_SID}}\",
              \"plugin_service_attributes\":{
                  \"custom_plugins\": [{\"name\": \"HRM Forms\", \"version\": \"0.0.1\", \"src\": \"https://assets-${{ inputs.environment_code }}.tl.techmatters.org/plugins/hrm-form/${{ github.ref_type }}/${{ github.ref_name }}/plugin-hrm-form.js\"}]
              },
              \"ui_version\": \"~$(jq -r '.packages."node_modules/@twilio/flex-ui".version' ./plugin-hrm-form/package-lock.json)\"
          }"

      # Send Slack notifying success
      - name: Slack Aselo channel
        if: ${{ inputs.send-slack-message != 'false' }}
        id: slack
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ env.GITHUB_ACTIONS_SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ env.ASELO_DEPLOYS_CHANNEL_ID }}
            text: '`[FLEX]` Deployment to `${{ inputs.helpline_code }}_${{ inputs.environment_code }}` of ${{ github.ref_type }} `${{ github.ref_name }}` requested by `${{ github.triggering_actor }}` completed using workflow `${{ github.workflow }}` with SHA ${{ github.sha }} :rocket:.'
      # Update deployment matrix with script and ssm parameters
      - name: Update deployment matrix
        uses: ./.github/actions/deployment-matrix
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          identifier: ${{ inputs.helpline_code }}
          environment: ${{ inputs.environment_code}}
          service_repo: 'flex-plugins'
          version_tag: ${{ github.ref_name }}

  deploy_form_definitions:
    uses: ./.github/workflows/deploy-form-definitions.yml
    needs: deploy
    secrets: inherit
    with:
      helpline_code: ${{ inputs.helpline_code }}
      environment: ${{ inputs.environment_code }}
      send-slack-message: 'false'
      invalidate-cache: ${{ inputs.invalidate-cache }}