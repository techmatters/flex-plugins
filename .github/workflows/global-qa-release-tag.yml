# Copyright (C) 2021-2023 Technology Matters
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

# Workflow to create a new pre-release with qa suffix

name: Create a QA candidate release

# Controls when the action will run.
on:
  workflow_dispatch:
    inputs:
      tag-prefix:
        description: Release tag prefix (generally the version, e.g. v1.2.3).
        required: true
      title:
        description: Release title - The title that will be given to this pre-release.
        required: true

jobs:
  deploy-flex:
    uses: ./.github/workflows/flex-deploy.yml
    secrets: inherit
    with:
      helpline_code: E2E
      environment_code: development
      send-slack-message: 'false'

  deploy-webchat:
    uses: ./.github/workflows/webchat-deploy.yml
    secrets: inherit
    with:
      helpline_code: E2E
      environment: development
      send-slack-message: 'false'

  run-e2e-tests:
    needs: [deploy-flex, deploy-webchat]

    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Run e2e tests
        uses: ./.github/actions/run-e2e-tests
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  generate-pre-release:
    needs: run-e2e-tests

    runs-on: ubuntu-latest
    outputs:
      qa-version: ${{ steps.create_pre_release.outputs.generated-pre-release-tag }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            .github/actions

      - name: Create pre release
        uses: ./.github/actions/generate-pre-release
        with:
          tag-prefix: ${{ inputs.tag-prefix }}
          tag-suffix: 'qa'
          title: ${{ inputs.title }}
          repository: ${{ github.repository }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        id: create_pre_release

      - name: Copy plugin to S3 release folders
        uses: ./.github/actions/copy-plugin-to-release-location
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          source-git-reference-type: ${{ github.ref_type }}
          source-git-reference: ${{ github.ref_name }}
          target-git-tag: ${{ steps.create_pre_release.outputs.generated-pre-release-tag }}

  tag-images:
    needs: generate-pre-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda_path:
          - account-scoped
          - facebookCallback
          - facebookSignin
          - instagramWebhook
          - ipLocationFinder
          - lineSetup
          - lineWebhook
          - modicaWebhook
          - recaptchaVerify
          - savePendingContacts
          - TwilioErrorReporter
          - twilioEventStreams

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PRIMARY_AWS_REGION }}
          # this plugin sets the AWS account ID to a secret which is not allowed in outputs
          # we have to disable that so repo output will work
          mask-aws-account-id: 'no'
        env:
          # if anything is set as a secret, it can't be used in outputs. So we need to set it as an env var
          PRIMARY_AWS_REGION: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Read EECR repo name
        id: ecr-name
        uses: aws-actions/amazon-ecr-login@v2
      - name: Read ECR url from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: /global/lambda/${{ matrix.lambda_path }}/name_for_repository
          env_variable_name: ECR_NAME
      - name: Tag Image with version
        run: |
          REF_NAME="${{ github.ref_name }}"
          REF_NAME_FOR_DOCKER_TAG="${REF_NAME//\//_-}"
          REPOSITORY_NAME="twilio/lambda/$ECR_NAME"
          MANIFEST=$(aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag="${{ github.ref_type }}.$REF_NAME_FOR_DOCKER_TAG" --output text --query 'images[].imageManifest')
          aws ecr put-image --repository-name $REPOSITORY_NAME --image-tag tag.${{ needs.generate-pre-release.outputs.qa-version }} --image-manifest "$MANIFEST"
  send-slack-message:
    needs: tag-images

    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            .github/actions

      # Send Slack notifying success
      - name: Slack aselo-deploys channel
        uses: ./.github/actions/notify-deploys
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          slack-message: "`[Flex]` Release from ${{ github.ref_type }} `${{ github.ref_name }}` requested by `${{ github.triggering_actor }}` completed with SHA ${{ github.sha }}. Release tag is `${{ needs.generate-pre-release.outputs.qa-version }}` :rocket:."
        env:
          SLACK_BOT_TOKEN: ${{ env.GITHUB_ACTIONS_SLACK_BOT_TOKEN }}