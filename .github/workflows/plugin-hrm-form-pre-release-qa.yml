# This is a basic workflow to publish a Twilio Flex-plugins with Github Actions

name: Pre-release QA

# Controls when the action will run.
on:
  workflow_dispatch:
    inputs:
      tag-prefix:
        description: Release tag name.
        required: true
      title:
        description: Release Changelog - Add a comment about the changes to be included in this release.
        required: true

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      # # Call main-action to compile and deploy
      # - name: Executing main-action
      #   uses: ./.github/actions/main-action
      #   with:
      #     account-sid: ${{ secrets.E2E_DEV_ACCOUNT_SID }}
      #     auth-token: ${{ secrets.E2E_DEV_AUTH_TOKEN }}
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      #     send-slack-message: false

      # # Build Playwright
      # - name: Install e2e-tests dependencies
      #   run: npm install
      #   working-directory: ./e2e-tests
      # - name: Setup dependencies for playwright/browsers
      #   uses: microsoft/playwright-github-action@v1
      # - name: Install Playwright CLI
      #   run: npx playwright install
      #   working-directory: ./e2e-tests

      # # Run E2E tests against actual E2E Flex instance
      # - name: Run Playwright tests
      #   run: DEBUG=pw:api PLAYWRIGHT_BASEURL=${{secrets.PLAYWRIGHT_BASEURL_E2E}} PLAYWRIGHT_USER_USERNAME=${{secrets.PLAYWRIGHT_USER_USERNAME}} PLAYWRIGHT_USER_PASSWORD=${{secrets.PLAYWRIGHT_USER_PASSWORD}} TWILIO_ACCOUNT_SID=${{secrets.E2E_DEV_ACCOUNT_SID}} TWILIO_AUTH_TOKEN=${{secrets.E2E_DEV_AUTH_TOKEN}} npx playwright test
      #   working-directory: ./e2e-tests
      #   id: latest_matching_tag

      # # Upload artifacts
      # - uses: actions/upload-artifact@v2
      #   if: ${{ always() }}
      #   with:
      #     name: test-artifacts
      #     path: e2e-tests/test-results

      ## TODO: test if this is aborted if E2E tests fails

      # Get latest tag for this version
      - name: Get latest tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: techmatters/flex-plugins # This repo
          # releases-only: false  # This repository doesn't use GitHub's "release" feature.
          prefix: "${{ inputs.tag-prefix }}-qa"
        id: latest_matching_tag
        continue-on-error: true

      # Generate next tag
      - name: Generate next tag
        uses: ./.github/actions/generate-next-tag
        with:
          prefix: "${{ inputs.tag-prefix }}-qa"
          latest-matching-tag: ${{ steps.latest_matching_tag.outputs.tag }}
        id: generate_next_tag

      - run: echo ${{ steps.generate_next_tag.outputs.generated-tag }}

      # Create a pre-release
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ steps.generate_next_tag.outputs.generated-tag }}
          prerelease: true
          title: ${{ inputs.title }}
          # files: |
          #   LICENSE.txt
          #   *.jar
        id: create_pre_release

      ## TODO: Abstract all of this in a custom action reused across repos?
      # Setup credentials to access AWS for parameters
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      # Set env vars to send slack message
      - name: Set GITHUB_ACTIONS_SLACK_BOT_TOKEN
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
          env_variable_name: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
      - name: Set ASELO_DEPLOYS_CHANNEL_ID
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "ASELO_DEPLOYS_CHANNEL_ID"
          env_variable_name: "ASELO_DEPLOYS_CHANNEL_ID"
      # Send Slack notifying success
      - name: Slack Aselo channel
        id: slack
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: ${{ env.ASELO_DEPLOYS_CHANNEL_ID }}
          slack-message: "`[Flex]` Action ${{ github.workflow }} completed with SHA ${{ github.sha }}. Release tag is ${{ steps.create_pre_release.outputs.automatic_releases_tag }} :rocket:."
        env:
          SLACK_BOT_TOKEN: ${{ env.GITHUB_ACTIONS_SLACK_BOT_TOKEN }}