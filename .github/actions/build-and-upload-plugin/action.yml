# Copyright (C) 2021-2024 Technology Matters
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

name: build-and-upload-plugin
description: 'Build Twilio Flex-Plugin and upload to S3 bucket'
inputs:
  aws-access-key-id:
    description: 'AWS credentials for Aselo user'
    required: true
  aws-secret-access-key:
    description: 'AWS credentials for Aselo user'
    required: true
  aws-region:
    description: 'AWS credentials for Aselo user'
    required: true
  git-reference:
    description: 'Identifies the git reference for target key'
    default: ''
  git-reference-type:
    description: 'Identifies if the git reference is a branch or tag'
    default: 'tag'
runs:
  using: "composite"
  steps:
    # Setup credentials to access AWS for parameters
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
    # Get AWS parameters
    - name: Set Twilio account SID for AS DEV
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "/development/twilio/AS/account_sid"
        env_variable_name: "TWILIO_ACCOUNT_SID"
    - name: Set Twilio Auth Token for AS DEV
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "/development/twilio/${{env.TWILIO_ACCOUNT_SID}}/auth_token"
        env_variable_name: "TWILIO_AUTH_TOKEN"
    - name: Set Datadog Application ID
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "DEV_DATADOG_AS_APP_ID"
        env_variable_name: "DATADOG_APP_ID"
    - name: Set Datadog Client Access token
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "DEV_DATADOG_AS_ACCESS_TOKEN"
        env_variable_name: "DATADOG_ACCESS_TOKEN"
    - name: Set Fullstory org id
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "FULLSTORY_ID"
        env_variable_name: "FULLSTORY_ID"
    - name: Set GITHUB_ACTIONS_SLACK_BOT_TOKEN
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
        env_variable_name: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
    - name: Set ASELO_DEPLOYS_CHANNEL_ID
      uses: "marvinpinto/action-inject-ssm-secrets@latest"
      with:
        ssm_parameter: "ASELO_DEPLOYS_CHANNEL_ID"
        env_variable_name: "ASELO_DEPLOYS_CHANNEL_ID"

    - name: Create secret.js
      run: |
        touch ./src/private/secret.js
      working-directory: ./plugin-hrm-form
      shell: bash
    - name: Fill secret.js
      run: |
        cat <<EOT >> ./src/private/secret.js
        export const datadogAccessToken = '$DATADOG_ACCESS_TOKEN';
        export const datadogApplicationID = '$DATADOG_APP_ID';
        export const fullStoryId = '$FULLSTORY_ID';
        EOT
      working-directory: ./plugin-hrm-form
      shell: bash
    # Build flex plugin
    - name: Run build command
      run: ENABLE_MONITORING=true twilio flex:plugins:build -l debug || true
      working-directory: ./plugin-hrm-form
      shell: bash
    - name: Check bundle was built
      if: ${{ hashFiles('plugin-hrm-form/build/plugin-hrm-form.js') == '' }}
      uses: actions/github-script@v3
      with:
        script: |
          core.setFailed('Bundle was not built!')
    # Upload plugin to S3 buckets
    - name: Upload Plugin to Development S3 bucket
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --exclude '*' --include '*' --content-type 'application/javascript; charset=utf-8'
      env:
        AWS_S3_BUCKET: assets-development.tl.techmatters.org
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_REGION: ${{ inputs.aws-region }}
        SOURCE_DIR: "plugin-hrm-form/build"
        DEST_DIR: plugins/hrm-form/${{inputs.git-reference-type}}/${{inputs.git-reference}}
    - name: Upload Plugin to Staging S3 bucket
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --exclude '*' --include '*' --content-type 'application/javascript; charset=utf-8'
      env:
        AWS_S3_BUCKET: assets-staging.tl.techmatters.org
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_REGION: ${{ inputs.aws-region }}
        SOURCE_DIR: "plugin-hrm-form/build"
        DEST_DIR: plugins/hrm-form/${{inputs.git-reference-type}}/${{inputs.git-reference}}
    - name: Upload Plugin to Production S3 bucket
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --include '*' --content-type 'application/javascript; charset=utf-8'
      env:
        AWS_S3_BUCKET: assets-production.tl.techmatters.org
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_REGION: ${{ inputs.aws-region }}
        SOURCE_DIR: "plugin-hrm-form/build"
        DEST_DIR: plugins/hrm-form/${{inputs.git-reference-type}}/${{inputs.git-reference}}
    - name: Clear cloudfront caches
      shell: bash
      run: |
        CF_DISTRO=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].DomainName}[?origin=='assets-development.tl.techmatters.org.s3-website.us-east-1.amazonaws.com'].id" --output text)
        aws cloudfront create-invalidation --distribution-id $CF_DISTRO --paths /plugins/hrm-form/${{inputs.git-reference-type}}/${{inputs.git-reference}}/*

        CF_DISTRO=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].DomainName}[?origin=='assets-staging.tl.techmatters.org.s3-website.us-east-1.amazonaws.com'].id" --output text)
        aws cloudfront create-invalidation --distribution-id $CF_DISTRO --paths /plugins/hrm-form/${{inputs.git-reference-type}}/${{inputs.git-reference}}/*

        CF_DISTRO=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].DomainName}[?origin=='assets-production.tl.techmatters.org.s3-website.us-east-1.amazonaws.com'].id" --output text)
        aws cloudfront create-invalidation --distribution-id $CF_DISTRO --paths /plugins/hrm-form/${{inputs.git-reference-type}}/${{inputs.git-reference}}/*