import { setOutput, setFailed } from '@actions/core';

async function generateReleaseTag() {
  const qaTag: string = process.env.REF;

  // Test that the tag matches the format we use for QA tags
  if (!qaTag.includes('-qa')) {
    throw new Error(`Provided REF env var does not matches the expected QA tag. Please provide a QA tag generated by "Create a QA candidate release" workflow`);
  }

  // Strip the version prefix (e.g. from vX.Y.Z-qa.3, get vX.Y.Z)
  const [tagPrefix] = qaTag.split('-qa');

  if (!tagPrefix || !tagPrefix.length) {
    throw new Error(`Calculated tagPrefix is empty, this looks like an invalid QA tag.`);
  }

  return tagPrefix;
}

generateReleaseTag()
.then((generatedTag) => {
  console.log(`Generated release tag: ${generatedTag}`);
  setOutput('generated-tag', generatedTag);
})
.catch((err) => {
  console.log(err);
  setFailed(err.message);
});
